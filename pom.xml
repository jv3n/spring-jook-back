<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com</groupId>
    <artifactId>jv3n-spring-jook-back</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>
    <name>spring-jook-back</name>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.2</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <v.angular.gen>17.2.2</v.angular.gen>
        <v.java>21</v.java>
        <v.jooq-codegen-maven>3.19.4</v.jooq-codegen-maven>
        <v.jooq>3.19.4</v.jooq>
        <v.junit-jupiter-engine>5.10.2</v.junit-jupiter-engine>
        <v.liquibase-core>4.26.0</v.liquibase-core>
        <v.mapstruct>1.5.5.Final</v.mapstruct>
        <v.maven.compiler.plugin>3.12.1</v.maven.compiler.plugin>
        <v.openapi-generator-maven-plugin>7.3.0</v.openapi-generator-maven-plugin>
        <v.postgresql>42.7.2</v.postgresql>
        <v.springdoc-openapi-maven-plugin>1.4</v.springdoc-openapi-maven-plugin>
        <v.springdoc-openapi-starter-webmvc>2.3.0</v.springdoc-openapi-starter-webmvc>

        <!-- db-->
        <db.driver>org.postgresql.Driver</db.driver>
        <db.url>jdbc:postgresql://localhost:5432/postgres</db.url>
        <db.user>admin</db.user>
        <db.pw>admin</db.pw>

        <!-- resource -->
        <link.project.resources>${project.basedir}/src/main/resources</link.project.resources>
        <link.build.generated-sources>${project.build.directory}/generated-sources</link.build.generated-sources>
    </properties>

    <dependencies>
        <!-- spring boot starter-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- DB -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.liquibase</groupId>
            <artifactId>liquibase-core</artifactId>
            <version>${v.liquibase-core}</version>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>${v.postgresql}</version>
        </dependency>

        <!-- JOOK-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jooq</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jooq</groupId>
            <artifactId>jooq</artifactId>
            <version>${v.jooq}</version>
        </dependency>

        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>${v.mapstruct}</version>
        </dependency>

        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-api</artifactId>
            <version>${v.springdoc-openapi-starter-webmvc}</version>
        </dependency>
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>${v.springdoc-openapi-starter-webmvc}</version>
        </dependency>

        <!-- Test-->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${v.junit-jupiter-engine}</version>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <build>
        <plugins>

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${v.maven.compiler.plugin}</version>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${v.mapstruct}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.springdoc</groupId>
                <artifactId>springdoc-openapi-maven-plugin</artifactId>
                <version>${v.springdoc-openapi-maven-plugin}</version>
                <executions>
                    <execution>
                        <id>generate-yaml</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <apiDocsUrl>http://localhost:8080/v3/api-docs.yaml</apiDocsUrl>
                    <outputDir>${link.project.resources}</outputDir>
                    <outputFileName>openapi.yaml</outputFileName>
                    <skip>false</skip>
                </configuration>
            </plugin>
            <!-- open api swagger gen -->
            <plugin>
                <groupId>org.openapitools</groupId>
                <artifactId>openapi-generator-maven-plugin</artifactId>
                <version>${v.openapi-generator-maven-plugin}</version>
                <executions>
                    <execution>
                        <id>generate-typescript</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <inputSpec>${link.project.resources}/openapi.yaml</inputSpec>
                            <generatorName>typescript-angular</generatorName>
                            <output>${link.build.generated-sources}/swagger</output>
                            <configOptions>
                                <ngVersion>${v.angular.gen}</ngVersion>
                                <fileNaming>kebab-case</fileNaming>
                                <packageName>jv3n-api</packageName>
                                <!-- <npmName>jv3n-api</npmName> -->
                            </configOptions>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!--            <plugin>-->
            <!--                <groupId>org.codehaus.mojo</groupId>-->
            <!--                <artifactId>exec-maven-plugin</artifactId>-->
            <!--                <version>3.2.0</version>-->
            <!--                <executions>-->
            <!--                    <execution>-->
            <!--                        <id>npm-install-and-build</id>-->
            <!--                        <phase>generate-resources</phase> &lt;!&ndash; Exécutez dans la phase generate-resources &ndash;&gt;-->
            <!--                        <goals>-->
            <!--                            <goal>exec</goal>-->
            <!--                        </goals>-->
            <!--                        <configuration>-->
            <!--                            <executable>sh</executable> &lt;!&ndash; Utilisez sh pour exécuter un fichier shell &ndash;&gt;-->
<!--                                        <workingDirectory>${link.build.generated-sources}/swagger</workingDirectory> &lt;!&ndash; Répertoire de travail &ndash;&gt;-->
            <!--                            <arguments>-->
            <!--                                <argument>${link.project.resources}/build.swagger.sh</argument> &lt;!&ndash; Chemin vers votre fichier shell &ndash;&gt;-->
            <!--                            </arguments>-->
            <!--                        </configuration>-->
            <!--                    </execution>-->
            <!--                </executions>-->
            <!--            </plugin>-->

            <!-- JOOK doc basic example => https://www.jooq.org/doc/latest/manual/code-generation/codegen-configuration/-->
            <plugin>

                <!-- Specify the maven code generator plugin -->
                <!-- Use org.jooq                for the Open Source Edition
                         org.jooq.pro            for commercial editions with Java 17 support,
                         org.jooq.pro-java-11    for commercial editions with Java 11 support,
                         org.jooq.pro-java-8     for commercial editions with Java 8 support,
                         org.jooq.trial          for the free trial edition with Java 17 support,
                         org.jooq.trial-java-11  for the free trial edition with Java 11 support,
                         org.jooq.trial-java-8   for the free trial edition with Java 8 support

                     Note: Only the Open Source Edition is hosted on Maven Central.
                           Install the others locally using the provided scripts, or access them from here: https://repo.jooq.org -->
                <groupId>org.jooq</groupId>
                <artifactId>jooq-codegen-maven</artifactId>
                <version>${v.jooq-codegen-maven}</version>

                <!-- The plugin should hook into the generate goal -->
                <executions>
                    <execution>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>

                <!-- Manage the plugin's dependency. In this example, we'll use a PostgreSQL database -->
                <dependencies>
                    <dependency>
                        <groupId>org.postgresql</groupId>
                        <artifactId>postgresql</artifactId>
                        <version>${v.postgresql}</version>
                    </dependency>
                </dependencies>

                <!-- Specify the plugin configuration.
                     The configuration format is the same as for the standalone code generator -->
                <configuration>

                    <!-- JDBC connection parameters -->
                    <jdbc>
                        <driver>${db.driver}</driver>
                        <url>${db.url}</url>
                        <user>${db.user}</user>
                        <password>${db.pw}</password>
                    </jdbc>

                    <!-- Generator parameters -->
                    <generator>
                        <database>
                            <name>org.jooq.meta.postgres.PostgresDatabase</name>
                            <includes>.*</includes>
                            <!-- In case your database supports catalogs, e.g. SQL Server:
                            <inputCatalog>public</inputCatalog>
                              -->
                            <inputSchema>public</inputSchema>
                        </database>
                        <target>
                            <packageName>com.jve.app</packageName>
                            <directory>${link.build.generated-sources}/jooq</directory>
                        </target>
                    </generator>
                </configuration>
            </plugin>

<!--            <plugin>-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-dependency-plugin</artifactId>-->
<!--                <version>3.6.1</version>-->
<!--                <configuration>-->
<!--                    <artifactItems>-->
<!--                        <artifactItem>-->
<!--                            <groupId>[ groupId ]</groupId>-->
<!--                            <artifactId>[ artifactId ]</artifactId>-->
<!--                            <version>[ version ]</version>-->
<!--                            <type>[ packaging ]</type>-->
<!--                            <classifier> [classifier - optional] </classifier>-->
<!--                            <overWrite>[ true or false ]</overWrite>-->
<!--                            <outputDirectory>[ output directory ]</outputDirectory>-->
<!--                            <destFileName>[ filename ]</destFileName>-->
<!--                        </artifactItem>-->
<!--                    </artifactItems>-->
<!--                </configuration>-->
<!--            </plugin>-->
        </plugins>
    </build>

</project>
